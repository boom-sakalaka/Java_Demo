<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">
    <!--开启了二级缓存
           eviction是缓存的清除策略,当缓存对象数量达到上限后,自动触发对应算法对缓存对象清除
               1.LRU – 最近最久未使用:移除最长时间不被使用的对象。
               O1 O2 O3 O4 .. O512
               14 99 83 1     893
               2.FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
               3.SOFT – 软引用:移除基于垃圾收集器状态和软引用规则的对象。
               4.WEAK – 弱引用:更积极的移除基于垃圾收集器状态和弱引用规则的对象。

               flushInterval: 代表多长时间自动清空缓存，
               size: 数量上限 list集合也算一个
               readOnly: true 直接拿到对象本身，效率较高
               false： 返回的是副本，安全性较高
       -->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true" />
    <!--    全局查询数据量太大，不建议放入缓存,内存压力过大 最好只缓存单个 实体的查询-->
    <select id="selectAll" resultType="com.test.mybatis.entity.Goods" useCache="false">
        select * from t_goods order by goods_id desc limit 10
    </select>
    <select id="selectById" parameterType="Integer" resultType="com.test.mybatis.entity.Goods">
        select * from t_goods where goods_id = #{value }
    </select>

    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.test.mybatis.entity.Goods">
        select * from t_goods where current_price
        between #{min} and #{max}
        order  by current_price
        limit 0,#{limt}
    </select>

    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        select g.*,c.category_name, "1" as test from t_goods g,t_category c
        where g.category_id = c.category_id
    </select>


    <resultMap id="rmGoods" type="com.test.mybatis.dto.GoodsDTO">
        <!--设置主键字段与属性映射-->
        <id property="goods.goodsId" column="goods_id"/>
        <!--设置非主键字段与属性映射-->
        <result property="goods.title" column="title"/>
        <result property="goods.originalCost" column="original_cost"/>
        <result property="goods.currentPrice" column="current_price"/>
        <result property="goods.discount" column="discount"/>
        <result property="goods.isFreeDelivery" column="is_free_delivery"/>
        <result property="goods.categoryId" column="category_id"/>
        <result property="category.categoryId" column="category_id"/>
        <result property="category.categoryName" column="category_name"/>
        <result property="category.parentId" column="parent_id"/>
        <result property="category.categoryLevel" column="category_level"/>
        <result property="category.categoryOrder" column="category_order"/>


        <result property="test" column="test"/>
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.*,c.*, "1" as test from t_goods g,t_category c
        where g.category_id = c.category_id
    </select>

    <!--    执行完sql 立即清空缓存-->
    <insert id="insert" parameterType="com.test.mybatis.entity.Goods" flushCache="true">
        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        VALUES (#{title} , #{subTitle} , #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})
        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
        select last_insert_id()
        </selectKey>
    </insert>
    <update id="update" parameterType="com.test.mybatis.entity.Goods">
        UPDATE t_goods
        SET
            title = #{title} ,
            sub_title = #{subTitle} ,
            original_cost = #{originalCost} ,
            current_price = #{currentPrice} ,
            discount = #{discount} ,
            is_free_delivery = #{isFreeDelivery} ,
            category_id = #{categoryId}
        WHERE
            goods_id = #{goodsId}
    </update>
    <!--delete from t_goods where goods_id in (1920,1921)-->
    <delete id="delete" parameterType="Integer">
        delete from t_goods where goods_id = #{value}
    </delete>
    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.test.mybatis.entity.Goods">
        select * from t_goods
        <where>
            <if test="categoryId !=null">
                and category_id = #{categoryId}
            </if>
            <if test="currentPrice != null">
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>

    <resultMap id="rmGoods1" type="com.test.mybatis.entity.Goods">
        <id column="goods_id" property="goodsId"></id>
        <collection property="goodsDetailList" select="goodsDetail.selectByGoodsId" column="goods_id"></collection>
    </resultMap>
    <select id="selectOneToMany" resultMap="rmGoods1">
        select * from t_goods limit 0,1;
    </select>
</mapper>